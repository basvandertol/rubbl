/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         TableGramparse
#define yylex           TableGramlex
#define yyerror         TableGramerror
#define yydebug         TableGramdebug
#define yynerrs         TableGramnerrs


/* Copy the first part of user declarations.  */
#line 31 "TaQL/TableGram.yy" /* yacc.c:339  */

using namespace casacore;

#line 76 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "TableGram.yhh".  */
#ifndef YY_TABLEGRAM_HOME_PETER_SW_CASACORE_BUILD_TABLES_TABLEGRAM_YHH_INCLUDED
# define YY_TABLEGRAM_HOME_PETER_SW_CASACORE_BUILD_TABLES_TABLEGRAM_YHH_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int TableGramdebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    STYLE = 258,
    TIMING = 259,
    SHOW = 260,
    SELECT = 261,
    UPDATE = 262,
    UPDSET = 263,
    INSERT = 264,
    VALUES = 265,
    DELETE = 266,
    COUNT = 267,
    COUNTALL = 268,
    CALC = 269,
    CREATETAB = 270,
    ALTERTAB = 271,
    FROM = 272,
    WHERE = 273,
    GROUPBY = 274,
    GROUPROLL = 275,
    HAVING = 276,
    ORDERBY = 277,
    NODUPL = 278,
    GIVING = 279,
    INTO = 280,
    SUBTABLES = 281,
    EXCEPT = 282,
    SORTASC = 283,
    SORTDESC = 284,
    LIMIT = 285,
    OFFSET = 286,
    ADDCOL = 287,
    RENAMECOL = 288,
    DROPCOL = 289,
    SETKEY = 290,
    COPYKEY = 291,
    RENAMEKEY = 292,
    DROPKEY = 293,
    ADDROW = 294,
    DMINFO = 295,
    ALL = 296,
    NAME = 297,
    UDFLIBSYN = 298,
    FLDNAME = 299,
    TABNAME = 300,
    LITERAL = 301,
    STRINGLITERAL = 302,
    REGEX = 303,
    AS = 304,
    TO = 305,
    IN = 306,
    INCONE = 307,
    BETWEEN = 308,
    EXISTS = 309,
    LIKE = 310,
    ILIKE = 311,
    LPAREN = 312,
    RPAREN = 313,
    COMMA = 314,
    LBRACKET = 315,
    RBRACKET = 316,
    LBRACE = 317,
    RBRACE = 318,
    COLON = 319,
    SEMICOL = 320,
    OPENOPEN = 321,
    OPENCLOSED = 322,
    CLOSEDOPEN = 323,
    CLOSEDCLOSED = 324,
    OPENEMPTY = 325,
    EMPTYOPEN = 326,
    CLOSEDEMPTY = 327,
    EMPTYCLOSED = 328,
    OR = 329,
    AND = 330,
    EQ = 331,
    EQASS = 332,
    GT = 333,
    GE = 334,
    LT = 335,
    LE = 336,
    NE = 337,
    EQNEAR = 338,
    NENEAR = 339,
    BITOR = 340,
    BITXOR = 341,
    BITAND = 342,
    PLUS = 343,
    MINUS = 344,
    TIMES = 345,
    DIVIDE = 346,
    DIVIDETRUNC = 347,
    MODULO = 348,
    UNARY = 349,
    BITNOT = 350,
    NOT = 351,
    POWER = 352
  };
#endif
/* Tokens.  */
#define STYLE 258
#define TIMING 259
#define SHOW 260
#define SELECT 261
#define UPDATE 262
#define UPDSET 263
#define INSERT 264
#define VALUES 265
#define DELETE 266
#define COUNT 267
#define COUNTALL 268
#define CALC 269
#define CREATETAB 270
#define ALTERTAB 271
#define FROM 272
#define WHERE 273
#define GROUPBY 274
#define GROUPROLL 275
#define HAVING 276
#define ORDERBY 277
#define NODUPL 278
#define GIVING 279
#define INTO 280
#define SUBTABLES 281
#define EXCEPT 282
#define SORTASC 283
#define SORTDESC 284
#define LIMIT 285
#define OFFSET 286
#define ADDCOL 287
#define RENAMECOL 288
#define DROPCOL 289
#define SETKEY 290
#define COPYKEY 291
#define RENAMEKEY 292
#define DROPKEY 293
#define ADDROW 294
#define DMINFO 295
#define ALL 296
#define NAME 297
#define UDFLIBSYN 298
#define FLDNAME 299
#define TABNAME 300
#define LITERAL 301
#define STRINGLITERAL 302
#define REGEX 303
#define AS 304
#define TO 305
#define IN 306
#define INCONE 307
#define BETWEEN 308
#define EXISTS 309
#define LIKE 310
#define ILIKE 311
#define LPAREN 312
#define RPAREN 313
#define COMMA 314
#define LBRACKET 315
#define RBRACKET 316
#define LBRACE 317
#define RBRACE 318
#define COLON 319
#define SEMICOL 320
#define OPENOPEN 321
#define OPENCLOSED 322
#define CLOSEDOPEN 323
#define CLOSEDCLOSED 324
#define OPENEMPTY 325
#define EMPTYOPEN 326
#define CLOSEDEMPTY 327
#define EMPTYCLOSED 328
#define OR 329
#define AND 330
#define EQ 331
#define EQASS 332
#define GT 333
#define GE 334
#define LT 335
#define LE 336
#define NE 337
#define EQNEAR 338
#define NENEAR 339
#define BITOR 340
#define BITXOR 341
#define BITAND 342
#define PLUS 343
#define MINUS 344
#define TIMES 345
#define DIVIDE 346
#define DIVIDETRUNC 347
#define MODULO 348
#define UNARY 349
#define BITNOT 350
#define NOT 351
#define POWER 352

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 234 "TaQL/TableGram.yy" /* yacc.c:355  */

TaQLConstNode* val;
TaQLRegexNode* valre;
TaQLNode* node;
TaQLConstNode* nodename;
TaQLMultiNode* nodelist;
TaQLQueryNode* nodeselect;
TaQLRecFldNodeRep* noderecfldrep;

#line 320 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:355  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int TableGramparse (void);

#endif /* !YY_TABLEGRAM_HOME_PETER_SW_CASACORE_BUILD_TABLES_TABLEGRAM_YHH_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 244 "TaQL/TableGram.yy" /* yacc.c:358  */

namespace casacore { //# NAMESPACE CASACORE - BEGIN
Bool theFromQueryDone;           /* for flex for knowing how to handle a , */
} //# NAMESPACE CASACORE - END
int TableGramlex (YYSTYPE*);

#line 342 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  97
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1592

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  98
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  108
/* YYNRULES -- Number of rules.  */
#define YYNRULES  330
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  627

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   352

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   253,   253,   254,   257,   258,   261,   263,   264,   266,
     268,   272,   273,   276,   279,   281,   283,   285,   289,   291,
     293,   295,   297,   299,   301,   305,   311,   315,   318,   322,
     331,   333,   335,   339,   342,   346,   352,   356,   362,   366,
     372,   378,   384,   392,   395,   400,   407,   413,   420,   425,
     430,   437,   441,   448,   453,   459,   465,   472,   480,   485,
     492,   498,   503,   508,   516,   520,   523,   528,   534,   538,
     544,   547,   552,   556,   564,   571,   577,   584,   590,   595,
     600,   607,   612,   619,   623,   631,   636,   641,   646,   651,
     656,   661,   666,   673,   678,   687,   691,   698,   703,   712,
     716,   723,   727,   733,   740,   744,   750,   757,   760,   764,
     767,   773,   778,   782,   787,   791,   798,   802,   807,   814,
     818,   823,   827,   832,   837,   842,   847,   852,   857,   862,
     869,   873,   878,   883,   888,   893,   900,   905,   910,   939,
     946,   951,   955,   958,   965,   970,   974,   978,   983,   989,
     994,   999,  1005,  1011,  1017,  1022,  1027,  1033,  1038,  1044,
    1048,  1055,  1059,  1064,  1068,  1072,  1077,  1083,  1089,  1097,
    1127,  1132,  1143,  1149,  1154,  1160,  1165,  1172,  1175,  1181,
    1186,  1189,  1196,  1200,  1205,  1211,  1218,  1222,  1225,  1230,
    1234,  1238,  1244,  1248,  1253,  1258,  1264,  1268,  1273,  1276,
    1283,  1286,  1293,  1296,  1301,  1306,  1311,  1316,  1321,  1326,
    1331,  1339,  1349,  1353,  1361,  1375,  1383,  1397,  1403,  1409,
    1414,  1421,  1426,  1432,  1439,  1447,  1455,  1466,  1469,  1474,
    1479,  1484,  1489,  1494,  1499,  1504,  1509,  1514,  1519,  1521,
    1526,  1531,  1538,  1540,  1547,  1550,  1557,  1559,  1564,  1569,
    1574,  1579,  1582,  1587,  1590,  1595,  1598,  1603,  1606,  1611,
    1615,  1619,  1624,  1628,  1634,  1638,  1646,  1649,  1654,  1661,
    1664,  1669,  1674,  1679,  1684,  1689,  1694,  1699,  1704,  1709,
    1714,  1719,  1724,  1729,  1734,  1739,  1744,  1749,  1754,  1759,
    1766,  1770,  1774,  1781,  1788,  1796,  1801,  1806,  1811,  1816,
    1819,  1824,  1829,  1835,  1838,  1843,  1848,  1854,  1859,  1864,
    1869,  1874,  1879,  1884,  1891,  1895,  1902,  1907,  1912,  1919,
    1924,  1930,  1937,  1940,  1948,  1951,  1956,  1964,  1968,  1976,
    1980
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "STYLE", "TIMING", "SHOW", "SELECT",
  "UPDATE", "UPDSET", "INSERT", "VALUES", "DELETE", "COUNT", "COUNTALL",
  "CALC", "CREATETAB", "ALTERTAB", "FROM", "WHERE", "GROUPBY", "GROUPROLL",
  "HAVING", "ORDERBY", "NODUPL", "GIVING", "INTO", "SUBTABLES", "EXCEPT",
  "SORTASC", "SORTDESC", "LIMIT", "OFFSET", "ADDCOL", "RENAMECOL",
  "DROPCOL", "SETKEY", "COPYKEY", "RENAMEKEY", "DROPKEY", "ADDROW",
  "DMINFO", "ALL", "NAME", "UDFLIBSYN", "FLDNAME", "TABNAME", "LITERAL",
  "STRINGLITERAL", "REGEX", "AS", "TO", "IN", "INCONE", "BETWEEN",
  "EXISTS", "LIKE", "ILIKE", "LPAREN", "RPAREN", "COMMA", "LBRACKET",
  "RBRACKET", "LBRACE", "RBRACE", "COLON", "SEMICOL", "OPENOPEN",
  "OPENCLOSED", "CLOSEDOPEN", "CLOSEDCLOSED", "OPENEMPTY", "EMPTYOPEN",
  "CLOSEDEMPTY", "EMPTYCLOSED", "OR", "AND", "EQ", "EQASS", "GT", "GE",
  "LT", "LE", "NE", "EQNEAR", "NENEAR", "BITOR", "BITXOR", "BITAND",
  "PLUS", "MINUS", "TIMES", "DIVIDE", "DIVIDETRUNC", "MODULO", "UNARY",
  "BITNOT", "NOT", "POWER", "$accept", "topcomm", "topcomm1", "sttimcoms",
  "stylecoms", "stylecomm", "stylelist", "command", "showcomm", "showlist",
  "showflds", "nestedcomm", "tfcommand", "subquery", "selcomm", "selrow",
  "selcol", "normcol", "countcomm", "updcomm", "updrow", "updlist",
  "updexpr", "inscomm", "insrow", "insclist", "insvalue", "insparts",
  "inspart", "insvlist", "delcomm", "calccomm", "cretabcomm", "alttabcomm",
  "altlist", "altcomm", "rencols", "dropcols", "renkeys", "dropkeys",
  "setkeys", "setkey", "copykeys", "copykey", "keyval", "brackval",
  "dminfo", "exprlist", "groupby", "having", "order", "limitoff",
  "tabnmtyp", "tabnmtyps", "given", "into", "columns", "collist",
  "colexpr", "wildcol", "nmcolumns", "nrowspec", "colspecs", "colspecl",
  "colspec", "tables", "tabalias", "tfnamen", "tfname", "concsub",
  "concslist", "concinto", "stabname", "tabname", "tabconc", "whexpr",
  "orexpr", "andexpr", "relexpr", "arithexpr", "simexpr", "inxexpr",
  "simbexpr", "namefld", "unit", "literal", "set", "elemlist", "elems",
  "elem", "singlerange", "range", "subscripts", "subsingle", "subsrange",
  "colonrangeinterval", "colonrangeindex", "colonrange", "sortlist",
  "sortexpr", "dmlist", "dmelem", "recexpr", "recfield", "srecfield",
  "srecval", "rrecfield", "asdtype", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352
};
# endif

#define YYPACT_NINF -448

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-448)))

#define YYTABLE_NINF -179

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     537,   260,    27,   313,   583,   210,   160,    18,   647,   727,
     437,   210,    76,    66,  1307,   316,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
      39,    27,  -448,  -448,  -448,  -448,  -448,   313,  -448,  -448,
     141,  -448,   647,   647,  -448,  -448,  -448,  -448,  -448,   155,
     237,   237,  1113,  1113,  -448,  1113,   915,  -448,  -448,   215,
    -448,  -448,   147,  -448,  -448,   -12,   143,  -448,  1300,  -448,
     209,   166,   182,  -448,  -448,    85,   322,   306,  -448,  -448,
    -448,    21,  -448,   139,   153,  -448,   210,   932,  -448,   210,
     228,   210,     7,    46,   150,   216,   800,  -448,  -448,  -448,
      27,  -448,   288,  -448,   513,  -448,  -448,   263,   263,  -448,
     972,   993,  1113,  1113,  1012,   258,     8,  1159,   277,  -448,
    -448,  -448,  -448,   227,   249,     6,  1113,   252,   252,   252,
     155,   252,   210,   932,   437,   347,   355,   647,    78,   932,
     932,  -448,   364,  1113,  1113,  1113,  1113,  1113,  1113,  1113,
    1113,  1113,  1113,  1113,  1113,  1113,  1113,  1113,  1113,  1113,
    1113,  1113,  1113,  1113,  1113,   440,  1113,  -448,  -448,  -448,
     668,   513,   357,   269,   234,  -448,    35,   136,   210,  -448,
     304,    13,    -3,    25,   210,    20,   210,  -448,   312,  -448,
     341,   351,   351,   367,   350,  -448,    46,   210,   351,   371,
     378,    33,    33,    33,    33,   932,  1553,  -448,    27,  -448,
    -448,   373,   366,  1113,  1106,  1113,  1425,  1487,  1487,  1113,
    1313,  -448,  -448,  1033,  1113,  1113,  1113,  1113,  -448,  -448,
    -448,   513,  -448,  -448,  -448,    25,   249,  -448,   210,   355,
     932,   932,   415,  -448,   397,   401,   143,  -448,  1412,  -448,
    -448,  1487,  1272,  1487,  1487,  1487,  1487,  1487,  1487,  1487,
    1487,  1487,  1487,  1487,   558,   380,   420,   171,   171,   252,
     252,   252,   252,   364,  1113,  1113,  1113,  1113,   252,  1052,
     249,  1206,    71,  -448,  -448,  -448,   396,  -448,  -448,  -448,
    -448,  -448,   419,   210,   354,    37,   446,    40,  -448,  -448,
    -448,   136,   137,   137,   198,   210,   349,    25,   932,    25,
     417,   217,  -448,  -448,  -448,    53,   441,   445,   932,   458,
     351,  -448,  1241,   458,   452,   456,  -448,   459,   460,  -448,
     444,   463,  -448,   447,   468,   478,   470,  -448,   249,  -448,
    -448,  1331,   764,  1487,  1113,  1348,   784,  1113,  1442,  1487,
    1487,  1487,  1487,  -448,   355,    25,   415,   471,   249,   471,
     932,   349,  -448,   474,  1113,  1412,  -448,  1487,  1474,  1487,
    1487,  1455,  -448,  -448,  1073,  1052,  -448,  -448,  -448,   475,
    -448,   313,   313,   476,   668,   932,   477,   210,   136,   349,
     486,  -448,   493,   383,   221,   236,  -448,   520,   230,   610,
     392,  -448,   249,   349,  1092,   312,  -448,   479,   312,  -448,
     367,   367,   249,   494,  -448,  -448,  1553,  -448,   516,   519,
     521,    33,  1092,    33,    33,    33,   527,    33,  -448,  -448,
    -448,  -448,  1364,  1487,  -448,  -448,  -448,  -448,  1380,  1487,
    1113,   415,   355,   349,   932,   249,   392,   530,  1487,  1113,
    1113,  -448,   532,  -448,  -448,  -448,   248,   249,   534,    25,
    -448,   392,   503,  -448,   174,  -448,   932,   932,   522,  -448,
     932,   568,   705,   842,   851,    16,   523,  -448,   906,   932,
    -448,   392,   443,  -448,    19,  -448,  -448,   932,   282,   458,
     458,   312,   524,  -448,  -448,   535,  -448,  -448,  -448,  -448,
    -448,  -448,   538,   539,  -448,  -448,  -448,  -448,  -448,  -448,
    1487,   349,   415,   392,   249,   564,   533,  1487,  1487,  -448,
      44,   545,   349,  -448,   548,  -448,   555,   399,   249,   300,
     236,   249,  -448,   932,   932,   523,   932,   523,   932,   523,
    -448,  -448,   932,    29,  1253,  -448,    22,  -448,   417,   556,
     543,   308,   565,  -448,  -448,  -448,  -448,   309,   494,   569,
    -448,   570,   392,   349,   458,   385,   458,   571,   668,   932,
     105,   392,   552,   557,  -448,   932,  -448,  -448,   523,   523,
     523,   523,  -448,   932,   932,   572,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,   564,   392,  -448,   513,  -448,  -448,  -448,
     329,   249,   668,   932,  -448,  -448,   573,   249,   249,   249,
    -448,   458,   458,   330,   541,   344,   249,   561,  -448,  -448,
    -448,   932,   549,  -448,   249,   932,   249
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,     6,    26,   145,     0,     0,     0,   145,     0,
       0,     0,     0,     2,     0,     7,    12,     4,    24,    23,
      18,    30,    19,    20,    21,    22,    31,    32,    15,    17,
      13,     9,   192,   190,   189,   191,    25,    27,   193,    29,
       0,   249,   145,   145,   253,   254,   257,   258,   156,     0,
       0,     0,     0,     0,   155,     0,     0,   261,    38,   196,
      43,    46,   146,   147,   154,   149,   198,   200,   202,   227,
     242,   244,   250,   251,   252,   172,     0,     0,   179,    33,
      48,     0,   170,     0,   173,   180,     0,     0,    58,     0,
       0,     0,    76,     0,   163,   136,     0,     1,     3,     5,
       8,    11,     0,    28,   263,    45,    44,     0,     0,   217,
       0,     0,     0,     0,     0,     0,   266,   202,     0,   265,
     267,   269,   299,     0,   266,     0,     0,   238,   237,   239,
       0,   240,     0,     0,     0,   196,   116,     0,     0,     0,
       0,   212,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   256,   255,   243,
       0,   263,     0,     0,     0,   194,   182,     0,     0,   174,
       0,    64,     0,   196,     0,     0,     0,   139,     0,   138,
       0,   163,   163,   161,   164,   165,     0,     0,   163,     0,
       0,     0,     0,     0,     0,     0,    81,    84,    10,    14,
      16,     0,   262,     0,     0,     0,   310,   286,   287,     0,
       0,    36,   246,   300,     0,     0,     0,     0,   288,   289,
     260,     0,    37,   259,   218,   196,   197,   144,     0,   116,
       0,     0,   119,   148,   150,     0,   199,   201,   219,   221,
     268,   225,     0,   213,   214,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   236,   235,   234,   228,   229,   230,
     231,   232,   233,     0,     0,     0,     0,     0,   241,   292,
     295,   202,     0,   294,   296,   303,     0,   178,   176,   177,
      34,    35,     0,     0,   186,     0,     0,   196,    52,   171,
     175,     0,     0,     0,     0,     0,   121,   196,     0,   196,
       0,     0,   323,   324,   325,   167,     0,     0,     0,   112,
       0,   137,     0,   112,     0,    86,    96,    87,    88,   102,
       0,    89,   105,     0,    90,     0,    91,   100,    92,    83,
     248,     0,     0,   313,   311,     0,     0,   301,   307,   282,
     283,   284,   285,   264,   116,   196,   119,   117,   115,   118,
       0,   121,   152,     0,     0,   220,   222,   226,     0,   215,
     216,   297,   293,   298,   304,   291,   245,   247,   184,   183,
     195,     0,     0,     0,     0,     0,     0,     0,     0,   121,
      63,   157,     0,     0,     0,     0,    59,    60,    64,     0,
     130,    47,    75,   121,     0,     0,   140,     0,     0,   168,
     161,   161,   162,     0,    78,   166,    82,    85,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   276,   274,
     280,   281,     0,   312,   277,   275,   278,   279,     0,   302,
     308,   119,   116,   121,     0,   120,   130,     0,   223,     0,
     305,   290,     0,   187,   188,   181,     0,    53,     0,   196,
      51,   130,     0,    66,     0,    65,     0,     0,    67,    69,
       0,     0,     0,     0,     0,   316,   122,   315,     0,     0,
      74,   130,     0,   328,   329,   326,   322,     0,     0,   112,
     112,     0,   113,   319,    94,     0,    95,   101,   103,   108,
     107,   104,   329,     0,    98,    99,   273,   272,   271,   270,
     309,   121,   119,   130,   114,   141,     0,   224,   306,   185,
       0,     0,   121,    50,     0,   159,     0,     0,    73,     0,
       0,    62,    61,     0,     0,   125,     0,   123,     0,   124,
     317,   318,     0,   132,   202,   131,   133,    77,   253,     0,
       0,     0,     0,   327,   169,    79,    80,     0,     0,     0,
     106,     0,   130,   121,   112,     0,   112,   151,     0,     0,
       0,   130,     0,     0,    71,     0,    70,    68,   126,   127,
     128,   129,   314,     0,     0,     0,   110,   109,   330,   321,
     320,    93,    97,   141,   130,    42,     0,   142,    41,   153,
       0,    54,     0,     0,    49,   158,     0,    72,   134,   135,
     111,   112,   112,     0,     0,     0,    56,     0,    39,    40,
     143,     0,     0,   160,    55,     0,    57
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -448,  -448,  -448,  -448,    17,     1,  -448,   606,  -448,  -448,
    -448,   339,  -448,   114,     9,  -448,  -448,   620,  -448,  -448,
    -448,   331,   246,  -448,  -448,   238,   164,  -448,   111,   175,
    -448,  -448,  -448,  -448,   336,  -196,  -448,  -448,  -448,  -448,
    -448,   232,  -448,   239,  -448,   241,  -306,   424,  -183,  -336,
    -325,  -247,  -132,   465,    73,  -448,   408,  -448,   531,  -448,
     372,    54,    50,  -448,   356,   -58,    -8,   497,   502,  -448,
    -448,  -448,     3,     5,  -448,  -120,    -4,   544,   542,    -2,
    -448,  -448,  -448,   -29,  -448,  -448,  -448,   506,   -49,   453,
     412,  -135,  -372,  -448,   311,   212,  -268,  -156,  -447,   145,
    -448,   130,  -390,   287,   381,   275,  -448,   200
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    12,    13,    14,    15,    16,    30,    17,    18,    36,
      37,    19,    78,    57,   123,    58,    59,    60,    21,    22,
      80,   297,   298,    23,    88,   304,   397,   468,   469,   527,
      24,    25,    26,    27,   206,   207,   325,   327,   334,   336,
     328,   329,   331,   332,   498,   483,   414,   357,   242,   361,
     400,   480,    94,   189,   566,   135,    61,    62,    63,    64,
     393,   319,   193,   194,   195,    81,    82,    83,    84,   294,
     379,   383,    85,    95,   176,   136,   475,    66,    67,    68,
      69,    70,    71,    72,   169,    73,    74,   211,   125,   119,
     249,   120,   282,   283,   372,   121,   284,   122,   476,   477,
     492,   493,   311,   312,   313,   485,   314,   553
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      65,   118,   237,    96,    65,    92,    38,   250,    39,    20,
     339,   373,   456,    38,   285,   239,   101,   417,   488,    31,
     443,   301,   305,    20,   186,   535,   537,   539,   181,   177,
       1,   183,   101,   185,   308,    89,   446,   138,    65,    65,
      38,   168,   103,   133,   540,   541,   116,   124,   117,   117,
     127,   128,   584,   129,   131,   212,   356,   387,   133,   115,
     583,   292,   139,   306,   461,   231,   222,   233,   552,   175,
     302,   139,   178,   303,   235,    44,    97,    45,   481,   178,
     178,   139,   139,   182,   178,   115,   578,   579,   187,   580,
     139,   581,   551,   139,   293,   407,   139,   384,   102,   388,
     124,   557,   117,   139,   568,   511,   188,   373,   214,   216,
     217,   218,   220,   408,   385,   354,   115,   208,   513,    79,
     244,   569,   212,   285,   131,    79,   307,  -178,   309,   236,
     375,    98,   376,    65,  -178,   245,   172,    38,   250,   322,
     248,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   109,   278,   602,   280,   124,   281,   117,
     299,   441,   330,   333,   335,   337,   563,   389,   295,   391,
     355,   179,   603,   555,   556,    86,   562,   401,   180,   403,
      87,    79,   190,   296,   392,  -177,   600,   571,   104,   515,
      79,   338,  -177,    79,     4,    79,   137,   191,   395,   101,
     192,   341,   107,   343,   523,   108,   525,   345,   140,   285,
     339,   348,   349,   350,   351,   352,   170,   124,   285,   117,
     615,   526,   132,   133,   547,   442,   358,   358,   594,   171,
     134,   316,   317,     4,   234,   184,    79,   398,   323,    40,
      41,    44,    75,    45,    33,    34,   167,    35,   595,   512,
     598,   161,   162,   163,   164,   196,   564,    76,   166,     4,
      77,   365,   367,   368,   369,   370,   405,   371,   406,    44,
     464,    45,   465,    46,    47,   380,    79,   302,   232,   178,
     303,    49,    79,   466,    50,   291,   467,    51,    79,   110,
      79,   111,    28,    29,   402,   618,   619,   375,   112,   520,
     113,    79,     4,   396,   412,   593,   221,   114,     8,     1,
     100,    10,    11,   139,   604,    52,    53,   290,     4,   459,
     209,   210,    55,    56,     8,   230,   231,    10,    11,   522,
     432,   405,   433,   554,   438,   439,   300,   612,    75,   166,
      33,    34,    79,    35,   310,    32,   445,    33,    34,   575,
      35,   576,   448,    76,   238,   133,    77,   405,   405,   587,
     589,   399,   348,   371,   240,   241,    40,    41,   381,   382,
     280,   457,   281,   315,    38,    38,   453,   454,   375,   231,
     614,   620,   330,   190,   333,   502,   503,   318,   505,   287,
     484,    33,    34,   375,    35,   622,    44,    79,    45,   320,
      46,    47,   285,   324,    76,   173,   174,    77,   484,    79,
     326,    50,   478,   479,    51,   231,   110,    32,   111,    33,
      34,   340,    35,   597,    93,   112,   360,   113,   510,   362,
     514,   463,   464,   363,   114,   596,   285,   517,   518,     4,
     105,   106,    52,    53,   377,    40,    41,   574,   575,    55,
     126,   378,   528,   528,   489,   490,   531,   158,   159,   160,
     161,   162,   163,   164,   543,   546,   544,   166,   124,    32,
     117,    33,    34,   484,    35,   548,    93,    45,   386,    46,
      47,   273,   274,   275,   404,   276,   277,    49,   413,   410,
      50,    79,   418,    51,   549,   110,   411,   111,   159,   160,
     161,   162,   163,   164,   112,   419,   113,   166,   420,   421,
     550,   422,   423,   114,   424,    40,    41,   425,   426,   427,
     444,    52,    53,   447,   452,   462,   458,   455,    55,    56,
       1,     2,     3,     4,     5,   388,     6,   613,     7,     8,
     470,     9,    10,    11,   491,    44,   487,    45,   494,    46,
      47,   495,   524,   496,   280,   601,   281,    49,    38,   504,
      50,   607,   516,    51,   519,   110,   521,   111,   395,   608,
     609,   530,   542,   558,   112,   559,   113,   552,   565,   561,
     572,   567,   124,   114,   117,    40,    41,   573,   280,   616,
     281,    52,    53,   570,   586,   585,    42,   588,    55,    56,
     605,   591,   592,   599,   610,   617,   606,   624,   621,   623,
      99,   626,    40,    41,    43,    44,   625,    45,    90,    46,
      47,    48,   390,   472,   460,   532,   471,    49,   473,   474,
      50,   577,   529,    51,   157,   158,   159,   160,   161,   162,
     163,   164,    44,   497,    45,   166,    46,    47,   416,    40,
      41,   321,   501,   499,    49,   359,   611,    50,   243,   288,
      51,    52,    53,    54,   289,   394,   415,   286,    55,    56,
      40,    41,   247,   246,   353,   366,   451,   582,   590,    44,
     545,    45,   486,    46,    47,    48,   409,   500,    52,    53,
       0,    49,   560,     0,    50,    55,    56,    51,     0,     0,
      44,     0,    45,     0,    46,    47,     0,    40,    41,     0,
       0,     0,    49,     0,     0,    50,     0,   279,    51,     0,
       0,     0,   111,   533,   534,    52,    53,    54,     0,    40,
      41,     0,    55,    56,    91,     0,     0,    44,     0,    45,
       0,    46,    47,     0,     0,     0,    52,    53,     0,    49,
       0,     0,    50,    55,    56,    51,     0,     0,     0,    44,
       0,    45,     0,    46,    47,     0,    40,    41,     0,     0,
       0,    49,     0,     0,    50,     0,     0,    51,     0,     0,
       0,     0,     0,    52,    53,     0,    40,    41,     0,     0,
      55,    56,     0,     0,     0,     0,    44,     0,    45,     0,
      46,    47,     0,     0,     0,    52,    53,   197,     0,     0,
       0,    50,    55,    56,    51,     0,    44,   430,    45,     0,
      46,    47,   198,   199,   200,   201,   202,   203,   204,   205,
       0,    50,   431,     0,    51,     0,     0,   436,     0,     0,
       0,     0,    52,    53,    40,    41,     0,     0,     0,    55,
     126,     0,   437,    40,    41,   536,     0,     0,     0,     0,
       0,     0,    52,    53,   538,     0,     0,     0,     0,    55,
     126,     0,     0,     0,    44,     0,    45,     0,    46,    47,
       0,     0,     0,    44,     0,    45,    49,    46,    47,    50,
       0,     0,    51,     0,     0,    49,     0,     0,    50,     0,
       0,    51,     0,     0,     0,     0,     0,     0,    40,    41,
       0,     0,     0,     0,     0,     0,     0,    40,    41,     0,
      52,    53,     0,     0,     0,     0,     0,    55,    56,    52,
      53,     0,     0,     0,    40,    41,    55,    56,    44,     0,
      45,     0,    46,    47,     0,     0,     0,    44,     0,    45,
      49,    46,    47,    50,     0,     0,    51,     0,     0,   130,
     111,     0,    50,     0,    44,    51,    45,     0,    46,    47,
       0,     0,     0,     0,    40,    41,    49,     0,     0,    50,
       0,     0,    51,     0,    52,    53,     0,     0,     0,     0,
       0,    55,    56,    52,    53,    40,    41,     0,     0,     0,
      55,   126,     0,     0,    44,     0,    45,     0,    46,    47,
      52,    53,     0,     0,    40,    41,     0,    55,    56,    50,
       0,   213,    51,     0,     0,    44,     0,    45,     0,    46,
      47,     0,     0,     0,     0,    40,    41,     0,     0,     0,
      50,     0,     0,    51,    44,     0,    45,   215,    46,    47,
      52,    53,     0,     0,    40,    41,     0,    55,   126,    50,
       0,   219,    51,     0,     0,    44,     0,    45,     0,    46,
      47,    52,    53,     0,     0,    40,    41,     0,    55,   126,
      50,     0,     0,    51,    44,     0,    45,   347,    46,    47,
      52,    53,     0,     0,    40,    41,     0,    55,   126,    50,
       0,     0,    51,     0,     0,    44,   111,    45,     0,    46,
      47,    52,    53,     0,     0,    40,    41,     0,    55,   126,
      50,     0,     0,    51,    44,     0,    45,   450,    46,    47,
      52,    53,     0,     0,     0,     0,    49,    55,   126,    50,
       0,     0,   482,     0,     0,    44,     0,    45,     0,    46,
      47,    52,    53,     0,     0,   342,     0,     0,    55,   126,
      50,     0,     0,    51,     0,     0,     0,     0,     0,     0,
      52,    53,     0,     0,     0,     0,     0,    55,    56,     0,
       0,   156,   157,   158,   159,   160,   161,   162,   163,   164,
       0,    52,    53,   166,     0,     0,     0,   141,    55,   126,
     142,   143,   144,     0,   145,   146,     0,     0,     0,     0,
       0,     0,     0,   223,     0,   224,   225,   226,   227,   228,
       0,   229,     0,     0,     0,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,     0,   141,   165,   166,   142,   143,   144,
       0,   145,   146,     0,     0,     0,     0,     0,     0,     0,
     374,     0,     0,   198,   199,   200,   201,   202,   203,   204,
     205,     0,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     178,   141,   165,   166,   142,   143,   144,     0,   145,   146,
       0,     0,     3,     4,     5,     0,     6,   223,     7,     8,
       0,     9,    10,    11,     0,     0,     0,     0,     0,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   364,   141,   165,
     166,   142,   143,   144,     0,   145,   146,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,     0,     0,   166,
       0,     0,   346,     0,     0,     0,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   428,     0,   165,   166,   156,   157,
     158,   159,   160,   161,   162,   163,   164,     0,     0,   429,
     166,   434,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,   162,   163,   164,     0,   435,   506,   166,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   507,   508,     0,   166,     0,     0,     0,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   509,     0,
       0,   166,     0,     0,     0,   156,   157,   158,   159,   160,
     161,   162,   163,   164,     0,     0,   223,   166,   224,   225,
     226,   227,   228,     0,   229,     0,     0,     0,     0,   344,
       0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   440,     0,     0,   166,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   374,
       0,     0,   166,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   449,
       0,     0,   166,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   156,   157,   158,   159,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   198,   199,   200,   201,   202,
     203,   204,   205
};

static const yytype_int16 yycheck[] =
{
       4,    50,   134,    11,     8,     9,     3,   142,     3,     0,
     206,   279,   384,    10,   170,   135,    15,   323,   408,     2,
     356,     8,    25,    14,    17,   472,   473,   474,    86,     8,
       3,    89,    31,    91,    14,    17,   361,    49,    42,    43,
      37,    70,    37,    18,    28,    29,    50,    51,    50,    51,
      52,    53,    30,    55,    56,   104,   239,    17,    18,    50,
      31,    26,    74,   183,   389,    59,    58,    61,    49,    77,
      57,    74,    59,    60,   132,    42,     0,    44,   403,    59,
      59,    74,    74,    87,    59,    76,   533,   534,    42,   536,
      74,   538,   482,    74,    59,    42,    74,    60,    59,    59,
     104,   491,   104,    74,    60,   441,    60,   375,   110,   111,
     112,   113,   114,    60,    77,   235,   107,   100,   443,     5,
      42,    77,   171,   279,   126,    11,   184,    42,   186,   133,
      59,    65,    61,   137,    49,    57,    51,   134,   273,   197,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    49,   166,    60,   170,   171,   170,   171,
     178,   354,   201,   202,   203,   204,   512,   297,    42,    42,
     238,    42,    77,   489,   490,    25,   511,   307,    49,   309,
      30,    77,    42,    57,    57,    42,   568,   522,    57,   446,
      86,   205,    49,    89,     6,    91,    59,    57,    10,   208,
      60,   213,    57,   215,   461,    60,    42,   219,    75,   375,
     416,   223,   224,   225,   226,   227,    60,   231,   384,   231,
     602,    57,    17,    18,   481,   355,   240,   241,   563,    57,
      25,   191,   192,     6,   130,    17,   132,   305,   198,    12,
      13,    42,    42,    44,    44,    45,    47,    47,   564,   442,
     566,    90,    91,    92,    93,    49,   513,    57,    97,     6,
      60,   273,   274,   275,   276,   277,    59,   279,    61,    42,
      59,    44,    61,    46,    47,   293,   172,    57,    61,    59,
      60,    54,   178,    57,    57,    61,    60,    60,   184,    62,
     186,    64,    42,    43,   308,   611,   612,    59,    71,    61,
      73,   197,     6,   304,   318,   562,    58,    80,    12,     3,
       4,    15,    16,    74,   571,    88,    89,    58,     6,   387,
      42,    43,    95,    96,    12,    58,    59,    15,    16,   459,
     342,    59,   344,    61,   346,   347,    42,   594,    42,    97,
      44,    45,   238,    47,    42,    42,   360,    44,    45,    59,
      47,    61,   364,    57,    17,    18,    60,    59,    59,    61,
      61,    22,   374,   375,    19,    20,    12,    13,    24,    25,
     384,   385,   384,    42,   381,   382,   381,   382,    59,    59,
      61,    61,   421,    42,   423,   424,   425,    30,   427,    42,
     404,    44,    45,    59,    47,    61,    42,   293,    44,    59,
      46,    47,   568,    42,    57,    76,    77,    60,   422,   305,
      42,    57,    30,    31,    60,    59,    62,    42,    64,    44,
      45,    58,    47,   565,    49,    71,    21,    73,   440,    42,
     444,    58,    59,    42,    80,    60,   602,   449,   450,     6,
      42,    43,    88,    89,    58,    12,    13,    58,    59,    95,
      96,    42,   466,   467,   410,   411,   470,    87,    88,    89,
      90,    91,    92,    93,   478,   479,   478,    97,   482,    42,
     482,    44,    45,   487,    47,    42,    49,    44,    42,    46,
      47,    51,    52,    53,    77,    55,    56,    54,    40,    58,
      57,   387,    50,    60,    61,    62,    61,    64,    88,    89,
      90,    91,    92,    93,    71,    59,    73,    97,    59,    59,
      77,    77,    59,    80,    77,    12,    13,    59,    50,    59,
      59,    88,    89,    59,    59,    42,    59,    61,    95,    96,
       3,     4,     5,     6,     7,    59,     9,   596,    11,    12,
      30,    14,    15,    16,    60,    42,    77,    44,    42,    46,
      47,    42,    59,    42,   568,   569,   568,    54,   565,    42,
      57,   575,    42,    60,    42,    62,    42,    64,    10,   583,
     584,    59,    59,    59,    71,    50,    73,    49,    24,    50,
      42,    58,   596,    80,   596,    12,    13,    42,   602,   603,
     602,    88,    89,    58,    61,    49,    23,    42,    95,    96,
      58,    42,    42,    42,    42,    42,    59,   621,    77,    58,
      14,   625,    12,    13,    41,    42,    77,    44,     8,    46,
      47,    48,   301,    23,   388,   471,   398,    54,    28,    29,
      57,   530,   467,    60,    86,    87,    88,    89,    90,    91,
      92,    93,    42,   421,    44,    97,    46,    47,   322,    12,
      13,   196,   423,   422,    54,   241,   593,    57,   137,   172,
      60,    88,    89,    90,   172,   303,   320,   171,    95,    96,
      12,    13,   140,   139,   231,   273,   375,   542,   558,    42,
     478,    44,   405,    46,    47,    48,   315,   422,    88,    89,
      -1,    54,   502,    -1,    57,    95,    96,    60,    -1,    -1,
      42,    -1,    44,    -1,    46,    47,    -1,    12,    13,    -1,
      -1,    -1,    54,    -1,    -1,    57,    -1,    59,    60,    -1,
      -1,    -1,    64,    28,    29,    88,    89,    90,    -1,    12,
      13,    -1,    95,    96,    17,    -1,    -1,    42,    -1,    44,
      -1,    46,    47,    -1,    -1,    -1,    88,    89,    -1,    54,
      -1,    -1,    57,    95,    96,    60,    -1,    -1,    -1,    42,
      -1,    44,    -1,    46,    47,    -1,    12,    13,    -1,    -1,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    88,    89,    -1,    12,    13,    -1,    -1,
      95,    96,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
      46,    47,    -1,    -1,    -1,    88,    89,    17,    -1,    -1,
      -1,    57,    95,    96,    60,    -1,    42,    63,    44,    -1,
      46,    47,    32,    33,    34,    35,    36,    37,    38,    39,
      -1,    57,    78,    -1,    60,    -1,    -1,    63,    -1,    -1,
      -1,    -1,    88,    89,    12,    13,    -1,    -1,    -1,    95,
      96,    -1,    78,    12,    13,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    89,    23,    -1,    -1,    -1,    -1,    95,
      96,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    47,
      -1,    -1,    -1,    42,    -1,    44,    54,    46,    47,    57,
      -1,    -1,    60,    -1,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    12,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    12,    13,    -1,
      88,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    88,
      89,    -1,    -1,    -1,    12,    13,    95,    96,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    -1,    42,    -1,    44,
      54,    46,    47,    57,    -1,    -1,    60,    -1,    -1,    54,
      64,    -1,    57,    -1,    42,    60,    44,    -1,    46,    47,
      -1,    -1,    -1,    -1,    12,    13,    54,    -1,    -1,    57,
      -1,    -1,    60,    -1,    88,    89,    -1,    -1,    -1,    -1,
      -1,    95,    96,    88,    89,    12,    13,    -1,    -1,    -1,
      95,    96,    -1,    -1,    42,    -1,    44,    -1,    46,    47,
      88,    89,    -1,    -1,    12,    13,    -1,    95,    96,    57,
      -1,    59,    60,    -1,    -1,    42,    -1,    44,    -1,    46,
      47,    -1,    -1,    -1,    -1,    12,    13,    -1,    -1,    -1,
      57,    -1,    -1,    60,    42,    -1,    44,    64,    46,    47,
      88,    89,    -1,    -1,    12,    13,    -1,    95,    96,    57,
      -1,    59,    60,    -1,    -1,    42,    -1,    44,    -1,    46,
      47,    88,    89,    -1,    -1,    12,    13,    -1,    95,    96,
      57,    -1,    -1,    60,    42,    -1,    44,    64,    46,    47,
      88,    89,    -1,    -1,    12,    13,    -1,    95,    96,    57,
      -1,    -1,    60,    -1,    -1,    42,    64,    44,    -1,    46,
      47,    88,    89,    -1,    -1,    12,    13,    -1,    95,    96,
      57,    -1,    -1,    60,    42,    -1,    44,    64,    46,    47,
      88,    89,    -1,    -1,    -1,    -1,    54,    95,    96,    57,
      -1,    -1,    60,    -1,    -1,    42,    -1,    44,    -1,    46,
      47,    88,    89,    -1,    -1,    59,    -1,    -1,    95,    96,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      -1,    88,    89,    97,    -1,    -1,    -1,    48,    95,    96,
      51,    52,    53,    -1,    55,    56,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    64,    -1,    66,    67,    68,    69,    70,
      -1,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    48,    96,    97,    51,    52,    53,
      -1,    55,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      64,    -1,    -1,    32,    33,    34,    35,    36,    37,    38,
      39,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      59,    48,    96,    97,    51,    52,    53,    -1,    55,    56,
      -1,    -1,     5,     6,     7,    -1,     9,    64,    11,    12,
      -1,    14,    15,    16,    -1,    -1,    -1,    -1,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    75,    48,    96,
      97,    51,    52,    53,    -1,    55,    56,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    -1,    -1,    -1,    97,
      -1,    -1,    59,    -1,    -1,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    63,    -1,    96,    97,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    -1,    78,
      97,    63,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    -1,    78,    63,    97,    -1,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    78,    63,    -1,    97,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    78,    -1,
      -1,    97,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    -1,    -1,    64,    97,    66,    67,
      68,    69,    70,    -1,    72,    -1,    -1,    -1,    -1,    64,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    64,    -1,    -1,    97,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    64,
      -1,    -1,    97,    -1,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    -1,    -1,    -1,    97,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    75,
      -1,    -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    -1,    -1,    97,    32,    33,    34,    35,    36,
      37,    38,    39
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     3,     4,     5,     6,     7,     9,    11,    12,    14,
      15,    16,    99,   100,   101,   102,   103,   105,   106,   109,
     112,   116,   117,   121,   128,   129,   130,   131,    42,    43,
     104,   102,    42,    44,    45,    47,   107,   108,   170,   171,
      12,    13,    23,    41,    42,    44,    46,    47,    48,    54,
      57,    60,    88,    89,    90,    95,    96,   111,   113,   114,
     115,   154,   155,   156,   157,   174,   175,   176,   177,   178,
     179,   180,   181,   183,   184,    42,    57,    60,   110,   111,
     118,   163,   164,   165,   166,   170,    25,    30,   122,    17,
     115,    17,   174,    49,   150,   171,   164,     0,    65,   105,
       4,   103,    59,   171,    57,   154,   154,    57,    60,   111,
      62,    64,    71,    73,    80,   112,   174,   177,   186,   187,
     189,   193,   195,   112,   174,   186,    96,   177,   177,   177,
      54,   177,    17,    18,    25,   153,   173,    59,    49,    74,
      75,    48,    51,    52,    53,    55,    56,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    96,    97,    47,   181,   182,
      60,    57,    51,   109,   109,   164,   172,     8,    59,    42,
      49,   163,   174,   163,    17,   163,    17,    42,    60,   151,
      42,    57,    60,   160,   161,   162,    49,    17,    32,    33,
      34,    35,    36,    37,    38,    39,   132,   133,   102,    42,
      43,   185,   186,    59,   177,    64,   177,   177,   177,    59,
     177,    58,    58,    64,    66,    67,    68,    69,    70,    72,
      58,    59,    61,    61,   111,   163,   174,   150,    17,   173,
      19,    20,   146,   156,    42,    57,   175,   176,   177,   188,
     189,   177,   177,   177,   177,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
     177,   177,   177,    51,    52,    53,    55,    56,   177,    59,
     174,   177,   190,   191,   194,   195,   185,    42,   165,   166,
      58,    61,    26,    59,   167,    42,    57,   119,   120,   164,
      42,     8,    57,    60,   123,    25,   173,   163,    14,   163,
      42,   200,   201,   202,   204,    42,   160,   160,    30,   159,
      59,   151,   163,   160,    42,   134,    42,   135,   138,   139,
     181,   140,   141,   181,   136,   181,   137,   181,   174,   133,
      58,   177,    59,   177,    64,   177,    59,    64,   177,   177,
     177,   177,   177,   187,   173,   163,   146,   145,   174,   145,
      21,   147,    42,    42,    75,   177,   188,   177,   177,   177,
     177,   177,   192,   194,    64,    59,    61,    58,    42,   168,
     164,    24,    25,   169,    60,    77,    42,    17,    59,   173,
     119,    42,    57,   158,   158,    10,   112,   124,   163,    22,
     148,   173,   174,   173,    77,    59,    61,    42,    60,   202,
      58,    61,   174,    40,   144,   162,   132,   144,    50,    59,
      59,    59,    77,    59,    77,    59,    50,    59,    63,    78,
      63,    78,   177,   177,    63,    78,    63,    78,   177,   177,
      64,   146,   173,   147,    59,   174,   148,    59,   177,    75,
      64,   192,    59,   171,   171,    61,   190,   174,    59,   163,
     120,   148,    42,    58,    59,    61,    57,    60,   125,   126,
      30,   123,    23,    28,    29,   174,   196,   197,    30,    31,
     149,   148,    60,   143,   174,   203,   201,    77,   200,   159,
     159,    60,   198,   199,    42,    42,    42,   139,   142,   143,
     203,   141,   181,   181,    42,   181,    63,    78,    63,    78,
     177,   147,   146,   148,   174,   149,    42,   177,   177,    42,
      61,    42,   173,   149,    59,    42,    57,   127,   174,   127,
      59,   174,   124,    28,    29,   196,    23,   196,    23,   196,
      28,    29,    59,   174,   177,   193,   174,   149,    42,    61,
      77,   200,    49,   205,    61,   144,   144,   200,    59,    50,
     205,    50,   148,   147,   149,    24,   152,    58,    60,    77,
      58,   148,    42,    42,    58,    59,    61,   126,   196,   196,
     196,   196,   197,    31,    30,    49,    61,    61,    42,    61,
     199,    42,    42,   149,   148,   144,    60,   150,   144,    42,
     190,   174,    60,    77,   149,    58,    59,   174,   174,   174,
      42,   152,   149,   186,    61,   190,   174,    42,   144,   144,
      61,    77,    61,    58,   174,    77,   174
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    98,    99,    99,   100,   100,   101,   101,   101,   101,
     101,   102,   102,   103,   104,   104,   104,   104,   105,   105,
     105,   105,   105,   105,   105,   106,   107,   107,   108,   108,
     109,   109,   109,   110,   110,   110,   111,   111,   112,   113,
     113,   113,   113,   114,   114,   114,   115,   116,   117,   118,
     118,   119,   119,   120,   120,   120,   120,   120,   121,   122,
     122,   122,   122,   122,   123,   123,   123,   124,   125,   125,
     126,   126,   127,   127,   128,   129,   129,   129,   130,   130,
     130,   131,   131,   132,   132,   133,   133,   133,   133,   133,
     133,   133,   133,   134,   134,   135,   135,   136,   136,   137,
     137,   138,   138,   139,   140,   140,   141,   142,   142,   143,
     143,   143,   144,   144,   145,   145,   146,   146,   146,   147,
     147,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     149,   149,   149,   149,   149,   149,   150,   150,   150,   151,
     151,   152,   152,   152,   153,   154,   154,   155,   155,   156,
     156,   156,   156,   156,   156,   157,   157,   158,   158,   158,
     158,   159,   159,   160,   160,   161,   161,   162,   162,   162,
     163,   163,   164,   164,   164,   164,   164,   165,   165,   166,
     166,   166,   167,   167,   168,   168,   169,   169,   169,   170,
     170,   170,   171,   171,   172,   172,   173,   173,   174,   174,
     175,   175,   176,   176,   176,   176,   176,   176,   176,   176,
     176,   176,   176,   176,   176,   176,   176,   176,   176,   176,
     176,   176,   176,   176,   176,   176,   176,   177,   177,   177,
     177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
     177,   177,   178,   178,   179,   179,   180,   180,   180,   180,
     180,   180,   180,   181,   181,   182,   182,   183,   183,   184,
     184,   184,   185,   185,   186,   186,   187,   187,   188,   189,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     190,   190,   190,   190,   190,   191,   191,   192,   192,   193,
     193,   193,   193,   194,   194,   194,   194,   195,   195,   195,
     195,   195,   195,   195,   196,   196,   197,   197,   197,   198,
     198,   199,   200,   200,   201,   201,   202,   203,   204,   205,
     205
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     2,     1,     2,     1,     1,     2,     2,
       3,     2,     1,     2,     3,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     2,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     2,    10,
      10,     8,     8,     1,     2,     2,     1,     5,     2,     8,
       6,     3,     1,     3,     6,     9,     7,    10,     2,     4,
       4,     6,     6,     4,     0,     3,     3,     2,     3,     1,
       3,     3,     3,     1,     6,     5,     2,     7,     5,     7,
       7,     3,     5,     2,     1,     3,     2,     2,     2,     2,
       2,     2,     2,     5,     3,     3,     1,     5,     3,     3,
       1,     3,     1,     3,     3,     1,     4,     1,     1,     3,
       3,     4,     0,     2,     3,     1,     0,     2,     2,     0,
       2,     0,     2,     3,     3,     3,     4,     4,     4,     4,
       0,     2,     2,     2,     4,     4,     1,     3,     2,     1,
       3,     0,     2,     4,     2,     0,     1,     1,     3,     1,
       3,     7,     4,     8,     1,     1,     1,     1,     5,     3,
       7,     0,     2,     0,     1,     1,     3,     2,     3,     5,
       1,     3,     1,     1,     2,     3,     3,     1,     1,     1,
       1,     5,     0,     2,     1,     3,     0,     2,     2,     1,
       1,     1,     1,     1,     1,     3,     0,     2,     1,     3,
       1,     3,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     3,     3,     4,     4,     2,     3,     3,
       4,     3,     4,     5,     6,     3,     4,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     2,
       2,     3,     1,     2,     1,     4,     3,     4,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     1,     1,     0,     3,     1,     1,     1,     1,     1,
       5,     5,     5,     5,     4,     4,     4,     4,     4,     4,
       4,     4,     3,     3,     3,     3,     2,     2,     2,     2,
       3,     2,     1,     2,     1,     1,     1,     1,     1,     1,
       2,     3,     4,     1,     2,     3,     4,     3,     4,     5,
       2,     3,     4,     3,     3,     1,     1,     2,     2,     1,
       3,     3,     3,     1,     1,     1,     3,     2,     3,     0,
       2
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
{
  YYUSE (yyvaluep);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 6:
#line 262 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.setTiming (True); }
#line 2084 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 8:
#line 265 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.setTiming (True); }
#line 2090 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 9:
#line 267 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.setTiming (True); }
#line 2096 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 10:
#line 269 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.setTiming (True); }
#line 2102 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 14:
#line 280 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.set ((yyvsp[0].val)->getString()); }
#line 2108 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 15:
#line 282 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.set ((yyvsp[0].val)->getString()); }
#line 2114 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 16:
#line 284 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.defineSynonym ((yyvsp[0].val)->getString()); }
#line 2120 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 17:
#line 286 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.defineSynonym ((yyvsp[0].val)->getString()); }
#line 2126 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 18:
#line 290 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].nodeselect); }
#line 2132 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 19:
#line 292 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2138 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 20:
#line 294 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2144 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 21:
#line 296 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2150 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 22:
#line 298 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2156 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 23:
#line 300 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].nodeselect); }
#line 2162 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 24:
#line 302 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2168 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 25:
#line 305 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(new TaQLShowNodeRep (*(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2177 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 26:
#line 311 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no list */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 2186 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 27:
#line 316 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.nodelist) = (yyvsp[0].nodelist); }
#line 2192 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 28:
#line 318 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].nodename));
           }
#line 2201 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 29:
#line 322 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setSeparator (" ");
               (yyval.nodelist)->add (*(yyvsp[0].nodename));
           }
#line 2212 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 30:
#line 332 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.nodeselect) = (yyvsp[0].nodeselect); }
#line 2218 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 31:
#line 334 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.nodeselect) = (yyvsp[0].nodeselect); }
#line 2224 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 32:
#line 336 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.nodeselect) = (yyvsp[0].nodeselect); }
#line 2230 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 33:
#line 339 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[0].nodeselect);
	   }
#line 2238 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 34:
#line 342 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[-1].nodeselect);
	       (yyval.nodeselect)->setBrackets();
	   }
#line 2247 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 35:
#line 346 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[-1].nodeselect);
	       (yyval.nodeselect)->setBrackets();
	   }
#line 2256 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 36:
#line 352 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[-1].nodeselect);
	       (yyval.nodeselect)->setBrackets();
	   }
#line 2265 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 37:
#line 356 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[-1].nodeselect);
	       (yyval.nodeselect)->setBrackets();
	   }
#line 2274 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 38:
#line 362 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[0].nodeselect);
           }
#line 2282 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 39:
#line 366 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLSelectNodeRep (*(yyvsp[-9].node), *(yyvsp[-7].nodelist), 0, *(yyvsp[-6].node), *(yyvsp[-5].node), *(yyvsp[-4].node),
					   *(yyvsp[-3].node), *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2293 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 40:
#line 372 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
		    new TaQLSelectNodeRep (*(yyvsp[-9].node), *(yyvsp[-6].nodelist), 0, *(yyvsp[-5].node), *(yyvsp[-4].node), *(yyvsp[-3].node),
					   *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[-8].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2304 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 41:
#line 378 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLSelectNodeRep (*(yyvsp[-7].node), *(yyvsp[-6].node), *(yyvsp[-5].node), *(yyvsp[-4].node),
					   *(yyvsp[-3].node), *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2315 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 42:
#line 384 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
		    new TaQLSelectNodeRep (*(yyvsp[-7].node), *(yyvsp[-5].node), *(yyvsp[-4].node), *(yyvsp[-3].node),
					   *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[-6].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2326 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 43:
#line 392 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 2334 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 44:
#line 395 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLColumnsNodeRep (False, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2344 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 45:
#line 400 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLColumnsNodeRep (True, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2354 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 46:
#line 407 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLColumnsNodeRep (False, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2364 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 47:
#line 413 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLCountNodeRep (*(yyvsp[-3].node), *(yyvsp[-1].nodelist), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2374 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 48:
#line 420 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 2382 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 49:
#line 425 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLUpdateNodeRep (*(yyvsp[-7].nodelist), *(yyvsp[-5].nodelist), *(yyvsp[-3].nodelist), *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2392 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 50:
#line 430 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
		    new TaQLUpdateNodeRep (*(yyvsp[-5].nodelist), *(yyvsp[-3].nodelist), 0, *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2402 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 51:
#line 437 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2411 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 52:
#line 441 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2421 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 53:
#line 448 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[-2].val)->getString(), "", *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2431 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 54:
#line 453 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* array slice or mask */
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[-5].val)->getString(), "", *(yyvsp[-3].nodelist), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2442 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 55:
#line 459 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* array slice and mask (in any order) */
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[-8].val)->getString(), "", *(yyvsp[-6].nodelist), *(yyvsp[-3].nodelist), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2453 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 56:
#line 465 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[-5].val)->getString(),
                                            (yyvsp[-3].val)->getString(), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2464 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 57:
#line 472 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[-8].val)->getString(),
                                            (yyvsp[-6].val)->getString(), *(yyvsp[-3].nodelist), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2475 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 58:
#line 480 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 2483 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 59:
#line 485 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* insert with SELECT command */
	       (yyvsp[0].nodeselect)->setNoExecute();
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[-2].nodelist), *(yyvsp[-1].nodelist), *(yyvsp[0].nodeselect), TaQLNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2495 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 60:
#line 492 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* insert in SQL style */
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[-2].nodelist), *(yyvsp[-1].nodelist), *(yyvsp[0].node), TaQLNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2506 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 61:
#line 498 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[-2].nodelist), *(yyvsp[-1].nodelist), *(yyvsp[0].node), *(yyvsp[-4].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2516 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 62:
#line 503 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[-4].nodelist), *(yyvsp[-3].nodelist), *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2526 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 63:
#line 508 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* insert in update style */
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[-2].nodelist), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2537 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 64:
#line 516 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no insert column-list */   
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 2546 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 65:
#line 520 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
           }
#line 2554 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 66:
#line 523 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
           }
#line 2562 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 67:
#line 528 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].nodelist)->setPPFix ("VALUES ", "");
               (yyval.node) = (yyvsp[0].nodelist);
           }
#line 2571 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 68:
#line 534 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].nodelist));
           }
#line 2580 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 69:
#line 538 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[0].nodelist));
           }
#line 2590 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 70:
#line 544 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
           }
#line 2598 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 71:
#line 547 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
           }
#line 2606 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 72:
#line 552 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2615 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 73:
#line 556 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2626 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 74:
#line 564 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLDeleteNodeRep (*(yyvsp[-3].nodelist), *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2636 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 75:
#line 571 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLCalcNodeRep (*(yyvsp[-2].nodelist), *(yyvsp[0].node),
                                         TaQLNode(), TaQLNode(), TaQLNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2647 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 76:
#line 577 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               TaQLMultiNode tabNode((TaQLMultiNodeRep*)0);
	       (yyval.node) = new TaQLNode(
               new TaQLCalcNodeRep (tabNode, *(yyvsp[0].node),
                                    TaQLNode(), TaQLNode(), TaQLNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2659 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 77:
#line 584 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLCalcNodeRep (*(yyvsp[-3].nodelist), *(yyvsp[-5].node), *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2669 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 78:
#line 590 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLCreTabNodeRep (*(yyvsp[-3].node), *(yyvsp[-2].nodelist), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2679 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 79:
#line 595 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLCreTabNodeRep (*(yyvsp[-5].node), *(yyvsp[-3].nodelist), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2689 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 80:
#line 600 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLCreTabNodeRep (*(yyvsp[-5].node), *(yyvsp[-3].nodelist), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2699 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 81:
#line 607 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLAltTabNodeRep (*(yyvsp[-1].node), TaQLMultiNode(), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2709 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 82:
#line 612 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLAltTabNodeRep (*(yyvsp[-3].node), *(yyvsp[-1].nodelist), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2719 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 83:
#line 619 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2728 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 84:
#line 623 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setSeparator (" ");
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2739 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 85:
#line 631 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode (
                    new TaQLAddColNodeRep(*(yyvsp[-1].nodelist), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2749 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 86:
#line 636 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRenDropNodeRep(0, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2759 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 87:
#line 641 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRenDropNodeRep(1, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2769 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 88:
#line 646 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSetKeyNodeRep (*(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2779 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 89:
#line 651 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSetKeyNodeRep (*(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2789 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 90:
#line 656 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRenDropNodeRep(2, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2799 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 91:
#line 661 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRenDropNodeRep(3, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2809 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 92:
#line 666 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLAddRowNodeRep(*(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2819 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 93:
#line 673 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-4].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-2].val)->getString()));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2829 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 94:
#line 678 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setSeparator (2, " TO ");
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-2].val)->getString()));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2841 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 95:
#line 687 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2850 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 96:
#line 691 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2860 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 97:
#line 698 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-4].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-2].nodename)->getString()));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2870 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 98:
#line 703 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setSeparator (2, " TO ");
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-2].nodename)->getString()));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2882 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 99:
#line 712 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].nodename)->getString()));
           }
#line 2891 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 100:
#line 716 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].nodename)->getString()));
           }
#line 2901 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 101:
#line 723 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2910 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 102:
#line 727 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2920 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 103:
#line 733 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep((yyvsp[-2].nodename)->getString(), *(yyvsp[0].noderecfldrep)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
               delete (yyvsp[0].noderecfldrep);
           }
#line 2931 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 104:
#line 740 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2940 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 105:
#line 744 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2950 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 106:
#line 750 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep((yyvsp[-3].nodename)->getString(),
                                          (yyvsp[-1].nodename)->getString(), (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2961 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 107:
#line 757 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.noderecfldrep) = (yyvsp[0].noderecfldrep);
           }
#line 2969 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 108:
#line 760 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.noderecfldrep) = (yyvsp[0].noderecfldrep);
           }
#line 2977 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 109:
#line 764 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.noderecfldrep) = new TaQLRecFldNodeRep ("", *(yyvsp[-1].nodelist), "");
           }
#line 2985 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 110:
#line 767 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       /* Like in glish [=] is the syntax for an empty 'record' */
               TaQLMultiNode empty(False);
               empty.setPPFix ("[", "]");
               (yyval.noderecfldrep) = new TaQLRecFldNodeRep ("", empty, "");
           }
#line 2996 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 111:
#line 773 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* empty vector of the given datatype */
               (yyval.noderecfldrep) = new TaQLRecFldNodeRep ("", TaQLNode(), (yyvsp[0].val)->getString());
           }
#line 3005 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 112:
#line 778 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no datamans */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3014 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 113:
#line 782 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 3022 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 114:
#line 787 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 3031 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 115:
#line 791 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 3041 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 116:
#line 798 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no groupby */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3050 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 117:
#line 802 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGroupNodeRep (TaQLGroupNodeRep::Normal, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3060 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 118:
#line 807 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGroupNodeRep (TaQLGroupNodeRep::Rollup, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3070 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 119:
#line 814 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no having */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3079 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 120:
#line 818 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 3087 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 121:
#line 823 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no sort */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3096 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 122:
#line 827 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Ascending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3106 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 123:
#line 832 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Ascending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3116 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 124:
#line 837 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Descending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3126 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 125:
#line 842 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3136 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 126:
#line 847 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3146 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 127:
#line 852 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Descending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3156 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 128:
#line 857 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3166 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 129:
#line 862 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Descending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3176 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 130:
#line 869 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no limit,offset */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3185 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 131:
#line 873 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[0].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3195 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 132:
#line 878 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[0].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3205 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 133:
#line 883 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (0, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3215 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 134:
#line 888 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3225 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 135:
#line 893 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[0].node), *(yyvsp[-2].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3235 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 136:
#line 900 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ((yyvsp[0].nodename)->getString(), TaQLMultiNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3245 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 137:
#line 905 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ((yyvsp[-2].nodename)->getString(), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3255 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 138:
#line 910 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ("", *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3265 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 139:
#line 939 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {  /* PLAIN_BIG, etc. for backward compatibility */
               TaQLNode val(new TaQLConstNodeRep (True));
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setPPFix ("[", "]");
               (yyval.nodelist)->add (new TaQLRecFldNodeRep ((yyvsp[0].val)->getString(), val, ""));
	   }
#line 3277 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 140:
#line 946 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
	   }
#line 3285 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 141:
#line 951 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no result */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3294 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 142:
#line 955 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 3302 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 143:
#line 958 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep (*(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3312 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 144:
#line 965 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 3320 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 145:
#line 970 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no column names given (thus take all) */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3329 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 146:
#line 974 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 3337 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 147:
#line 978 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3347 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 148:
#line 983 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3356 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 149:
#line 989 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColNodeRep (*(yyvsp[0].node), "", "", ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3366 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 150:
#line 994 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColNodeRep (*(yyvsp[-2].node), (yyvsp[0].val)->getString(), "", ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3376 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 151:
#line 999 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColNodeRep (*(yyvsp[-6].node), (yyvsp[-3].val)->getString(),
                                        (yyvsp[-1].val)->getString(), ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3387 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 152:
#line 1005 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLColNodeRep (*(yyvsp[-3].node), (yyvsp[-1].val)->getString(),
                                        "", (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3398 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 153:
#line 1011 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColNodeRep (*(yyvsp[-7].node), (yyvsp[-4].val)->getString(),
                                        (yyvsp[-2].val)->getString(), (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3409 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 154:
#line 1017 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node)= (yyvsp[0].node);
           }
#line 3417 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 155:
#line 1022 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {          /* SELECT * FROM ... */
               TaQLRegexNode p (new TaQLRegexNodeRep ("~p/*/"));
               (yyval.node) = new TaQLNode (new TaQLColNodeRep (p, "", "", ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3427 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 156:
#line 1027 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode (new TaQLColNodeRep (*(yyvsp[0].valre), "", "", ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3436 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 157:
#line 1033 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
	   }
#line 3446 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 158:
#line 1038 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-3].val)->getString(),
                                               (yyvsp[-1].val)->getString()));
	   }
#line 3457 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 159:
#line 1044 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
	   }
#line 3466 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 160:
#line 1048 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-6].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-3].val)->getString(),
                                               (yyvsp[-1].val)->getString()));
	   }
#line 3476 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 161:
#line 1055 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no nrows given */
               (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3485 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 162:
#line 1059 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 3493 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 163:
#line 1064 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no column specifications given */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3502 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 164:
#line 1068 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 3510 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 165:
#line 1072 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3520 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 166:
#line 1077 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3529 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 167:
#line 1083 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
		    new TaQLColSpecNodeRep((yyvsp[-1].val)->getString(), (yyvsp[0].val)->getString(),
		                           TaQLMultiNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3540 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 168:
#line 1089 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {	
               TaQLMultiNode re(False);
	       re.add (*(yyvsp[0].node));
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[-2].val)->getString(), (yyvsp[-1].val)->getString(),
		                           re));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3553 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 169:
#line 1097 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[-4].val)->getString(), (yyvsp[-3].val)->getString(),
		                           *(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3564 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 170:
#line 1127 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3574 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 171:
#line 1132 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3583 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 172:
#line 1143 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {                          /* table name is also alias */
	       (yyvsp[0].val)->setIsTableName();
	       (yyval.node) = new TaQLNode(
                    new TaQLTableNodeRep(*(yyvsp[0].val), (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3594 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 173:
#line 1149 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {                        /* no alias */
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[0].node), ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3604 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 174:
#line 1154 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[-1].node), (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3615 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 175:
#line 1160 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[-2].node), (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3625 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 176:
#line 1165 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[0].node), (yyvsp[-2].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3635 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 177:
#line 1172 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 3643 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 178:
#line 1175 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
               (yyval.node) = (yyvsp[0].val);
           }
#line 3652 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 179:
#line 1181 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       theFromQueryDone = True;
	       (yyvsp[0].nodeselect)->setFromExecute();
               (yyval.node) = (yyvsp[0].nodeselect);
           }
#line 3662 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 180:
#line 1186 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].nodename);
           }
#line 3670 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 181:
#line 1189 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLConcTabNodeRep((yyvsp[-1].nodename)->getString(), *(yyvsp[-3].nodelist), *(yyvsp[-2].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3680 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 182:
#line 1196 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {    /* no SUBTABLES */
                (yyval.nodelist) = new TaQLMultiNode();
                TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3689 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 183:
#line 1200 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
                (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 3697 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 184:
#line 1205 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodelist)->add (*(yyvsp[0].val));
	   }
#line 3708 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 185:
#line 1211 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodelist)->add (*(yyvsp[0].val));
	   }
#line 3718 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 186:
#line 1218 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no GIVING */
               (yyval.nodename) = new TaQLConstNode(new TaQLConstNodeRep(String()));
               TaQLNode::theirNodesCreated.push_back ((yyval.nodename));
           }
#line 3727 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 187:
#line 1222 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodename) = (yyvsp[0].nodename);
           }
#line 3735 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 188:
#line 1225 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodename) = (yyvsp[0].nodename);
          }
#line 3743 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 189:
#line 1230 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 3752 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 190:
#line 1234 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 3761 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 191:
#line 1238 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 3770 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 192:
#line 1244 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 3779 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 193:
#line 1248 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodename) = (yyvsp[0].nodename);
           }
#line 3787 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 194:
#line 1253 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3797 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 195:
#line 1258 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 3806 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 196:
#line 1264 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no selection */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3815 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 197:
#line 1268 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].node);
	   }
#line 3823 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 198:
#line 1273 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].node);
           }
#line 3831 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 199:
#line 1276 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_OR, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3841 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 200:
#line 1283 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].node);
           }
#line 3849 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 201:
#line 1286 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_AND, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3859 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 202:
#line 1293 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].node);
           }
#line 3867 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 203:
#line 1296 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3877 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 204:
#line 1301 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3887 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 205:
#line 1306 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_GT, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3897 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 206:
#line 1311 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_GE, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3907 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 207:
#line 1316 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_LT, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3917 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 208:
#line 1321 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_LE, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3927 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 209:
#line 1326 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3937 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 210:
#line 1331 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
   	       TaQLMultiNode set(False);
               set.add (*(yyvsp[-2].node));
               set.add (*(yyvsp[0].node));
               set.add (TaQLConstNode(new TaQLConstNodeRep(1e-5)));
               (yyval.node) = new TaQLNode (new TaQLFuncNodeRep("NEAR", set));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3950 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 211:
#line 1339 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
   	       TaQLMultiNode set(False);
               set.add (*(yyvsp[-2].node));
               set.add (*(yyvsp[0].node));
               set.add (TaQLConstNode(new TaQLConstNodeRep(1e-5)));
               TaQLNode ref (new TaQLFuncNodeRep("NEAR", set));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3965 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 212:
#line 1349 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(TaQLBinaryNodeRep::handleRegex (*(yyvsp[-1].node), *(yyvsp[0].valre)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3974 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 213:
#line 1353 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
   	       TaQLMultiNode re(False);
               re.add (*(yyvsp[0].node));
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[-2].node), ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3987 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 214:
#line 1361 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
   	       TaQLMultiNode mn1(False);
               mn1.add (*(yyvsp[-2].node));
               TaQLNode tn1 (new TaQLFuncNodeRep("LOWER", mn1));
   	       TaQLMultiNode mn2(False);
               mn2.add (*(yyvsp[0].node));
               TaQLNode tn2 (new TaQLFuncNodeRep("LOWER", mn2));
   	       TaQLMultiNode re(False);
               re.add (tn2);
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, tn1, ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4006 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 215:
#line 1375 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
   	       TaQLMultiNode re(False);
               re.add (*(yyvsp[0].node));
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *(yyvsp[-3].node), ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4019 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 216:
#line 1383 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
   	       TaQLMultiNode mn1(False);
               mn1.add (*(yyvsp[-3].node));
               TaQLNode tn1 (new TaQLFuncNodeRep("LOWER", mn1));
   	       TaQLMultiNode mn2(False);
               mn2.add (*(yyvsp[0].node));
               TaQLNode tn2 (new TaQLFuncNodeRep("LOWER", mn2));
   	       TaQLMultiNode re(False);
               re.add (tn2);
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, tn1, ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4038 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 217:
#line 1397 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].nodeselect)->setNoExecute();
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_EXISTS, *(yyvsp[0].nodeselect)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	    }
#line 4049 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 218:
#line 1403 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].nodeselect)->setNoExecute();
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOTEXISTS, *(yyvsp[0].nodeselect)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
            }
#line 4060 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 219:
#line 1409 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4070 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 220:
#line 1414 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLNode p(
                    new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-3].node), *(yyvsp[0].node)));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4082 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 221:
#line 1421 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-2].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4092 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 222:
#line 1426 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLNode p (new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-3].node), *(yyvsp[0].nodelist)));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4103 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 223:
#line 1432 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLMultiNode pr(False);
	       pr.add (new TaQLRangeNodeRep (True, *(yyvsp[-2].node), *(yyvsp[0].node), True));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-4].node), pr));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4115 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 224:
#line 1439 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLMultiNode pr(False);
	       pr.add (new TaQLRangeNodeRep (True, *(yyvsp[-2].node), *(yyvsp[0].node), True));
	       TaQLNode p (new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-5].node), pr));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4128 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 225:
#line 1447 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLMultiNode pr(False);
	       pr.add (*(yyvsp[-2].node));
	       pr.add (*(yyvsp[0].node));
	       (yyval.node) = new TaQLNode(
                    new TaQLFuncNodeRep ("anyCone", pr));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4141 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 226:
#line 1455 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLMultiNode pr(False);
	       pr.add (*(yyvsp[-3].node));
	       pr.add (*(yyvsp[0].node));
               TaQLNode p (new TaQLFuncNodeRep ("anyCone", pr));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4155 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 227:
#line 1466 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node)= (yyvsp[0].node);
           }
#line 4163 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 228:
#line 1469 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_PLUS, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4173 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 229:
#line 1474 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_MINUS, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4183 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 230:
#line 1479 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_TIMES, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4193 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 231:
#line 1484 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_DIVIDE, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4203 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 232:
#line 1489 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_DIVIDETRUNC, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4213 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 233:
#line 1494 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_MODULO, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4223 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 234:
#line 1499 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_BITAND, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4233 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 235:
#line 1504 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_BITXOR, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4243 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 236:
#line 1509 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_BITOR, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4253 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 237:
#line 1514 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_MINUS, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4263 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 238:
#line 1520 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 4269 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 239:
#line 1521 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_BITNOT, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4279 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 240:
#line 1526 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4289 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 241:
#line 1531 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_POWER, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4299 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 242:
#line 1539 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 4305 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 243:
#line 1540 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUnitNodeRep ((yyvsp[0].nodename)->getString(), *(yyvsp[-1].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4315 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 244:
#line 1547 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 4323 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 245:
#line 1550 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_INDEX, *(yyvsp[-3].node), *(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4333 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 246:
#line 1558 "TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 4339 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 247:
#line 1559 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLFuncNodeRep ((yyvsp[-3].nodename)->getString(), *(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4349 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 248:
#line 1564 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLFuncNodeRep ("COUNT", *(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4359 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 249:
#line 1569 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLFuncNodeRep ("COUNTALL"));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4369 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 250:
#line 1574 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLKeyColNodeRep ((yyvsp[0].nodename)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4379 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 251:
#line 1579 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].val);
	   }
#line 4387 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 252:
#line 1582 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].node);
	   }
#line 4395 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 253:
#line 1587 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {            /* simple name */
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 4403 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 254:
#line 1590 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {         /* name with . or :: */
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 4411 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 255:
#line 1595 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodename) = (yyvsp[0].nodename);
           }
#line 4419 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 256:
#line 1598 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* compound unit (with special characters) */
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 4427 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 257:
#line 1603 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.val) = (yyvsp[0].val);
	   }
#line 4435 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 258:
#line 1606 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.val) = (yyvsp[0].val);
	   }
#line 4443 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 259:
#line 1611 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyvsp[-1].nodelist)->setIsSetOrArray();
               (yyval.node) = (yyvsp[-1].nodelist);
           }
#line 4452 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 260:
#line 1615 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyvsp[-1].nodelist)->setIsSetOrArray();
               (yyval.node) = (yyvsp[-1].nodelist);
           }
#line 4461 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 261:
#line 1619 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].nodeselect);
           }
#line 4469 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 262:
#line 1624 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
	       (yyval.nodelist)->setPPFix("", "");
           }
#line 4478 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 263:
#line 1628 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);       /* no elements */
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 4487 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 264:
#line 1634 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 4496 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 265:
#line 1638 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 4507 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 266:
#line 1646 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 4515 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 267:
#line 1649 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 4523 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 268:
#line 1654 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(True);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 4533 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 269:
#line 1661 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 4541 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 270:
#line 1664 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-3].node), *(yyvsp[-1].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4551 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 271:
#line 1669 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-3].node), *(yyvsp[-1].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4561 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 272:
#line 1674 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-3].node), *(yyvsp[-1].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4571 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 273:
#line 1679 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-3].node), *(yyvsp[-1].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4581 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 274:
#line 1684 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[-1].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
          }
#line 4591 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 275:
#line 1689 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[-1].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
          }
#line 4601 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 276:
#line 1694 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[-1].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4611 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 277:
#line 1699 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[-1].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4621 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 278:
#line 1704 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-2].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4631 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 279:
#line 1709 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-2].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4641 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 280:
#line 1714 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-2].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4651 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 281:
#line 1719 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-2].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4661 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 282:
#line 1724 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-2].node), *(yyvsp[0].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4671 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 283:
#line 1729 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-2].node), *(yyvsp[0].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4681 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 284:
#line 1734 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-2].node), *(yyvsp[0].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4691 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 285:
#line 1739 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-2].node), *(yyvsp[0].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4701 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 286:
#line 1744 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[0].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4711 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 287:
#line 1749 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[0].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4721 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 288:
#line 1754 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-1].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4731 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 289:
#line 1759 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-1].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4741 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 290:
#line 1766 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 4750 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 291:
#line 1770 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	   }
#line 4759 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 292:
#line 1774 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	   }
#line 4771 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 293:
#line 1781 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	       (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 4783 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 294:
#line 1788 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 4794 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 295:
#line 1796 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[0].node), 0, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4804 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 296:
#line 1801 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 4812 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 297:
#line 1806 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[0].node), 0, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4822 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 298:
#line 1811 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 4830 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 299:
#line 1816 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 4838 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 300:
#line 1819 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-1].node), 0, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4848 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 301:
#line 1824 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-2].node), 0, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4858 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 302:
#line 1829 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-3].node), 0, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4868 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 303:
#line 1835 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 4876 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 304:
#line 1838 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode (new TaQLIndexNodeRep
                    (*(yyvsp[-1].node), TaQLConstNode(new TaQLConstNodeRep(Int64(Slicer::MimicSource))), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4886 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 305:
#line 1843 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode (new TaQLIndexNodeRep
                    (*(yyvsp[-2].node), TaQLConstNode(new TaQLConstNodeRep(Int64(Slicer::MimicSource))), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4896 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 306:
#line 1848 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode (new TaQLIndexNodeRep
                    (*(yyvsp[-3].node), TaQLConstNode(new TaQLConstNodeRep(Int64(Slicer::MimicSource))), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4906 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 307:
#line 1854 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-2].node), *(yyvsp[0].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4916 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 308:
#line 1859 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-3].node), *(yyvsp[-1].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4926 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 309:
#line 1864 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-4].node), *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4936 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 310:
#line 1869 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, *(yyvsp[0].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4946 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 311:
#line 1874 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, *(yyvsp[-1].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4956 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 312:
#line 1879 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4966 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 313:
#line 1884 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, 0, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4976 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 314:
#line 1891 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 4985 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 315:
#line 1895 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 4995 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 316:
#line 1902 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::None, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5005 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 317:
#line 1907 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::Ascending, *(yyvsp[-1].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5015 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 318:
#line 1912 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::Descending, *(yyvsp[-1].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5025 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 319:
#line 1919 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5035 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 320:
#line 1924 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5044 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 321:
#line 1930 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ("", *(yyvsp[-1].nodelist), ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 5054 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 322:
#line 1937 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5062 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 323:
#line 1940 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5073 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 324:
#line 1948 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 5081 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 325:
#line 1951 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 5089 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 326:
#line 1956 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ((yyvsp[-2].val)->getString(), *(yyvsp[0].noderecfldrep)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
               delete (yyvsp[0].noderecfldrep);
           }
#line 5100 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 327:
#line 1964 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.noderecfldrep) = new TaQLRecFldNodeRep ("", *(yyvsp[-1].node), (yyvsp[0].val)->getString());
           }
#line 5108 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 328:
#line 1968 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ((yyvsp[-2].val)->getString(), *(yyvsp[0].noderecfldrep)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
               delete (yyvsp[0].noderecfldrep);
           }
#line 5119 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 329:
#line 1976 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no datatype */
               (yyval.val) = new TaQLConstNode(new TaQLConstNodeRep(String()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.val));
           }
#line 5128 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 330:
#line 1980 "TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.val) = (yyvsp[0].val);
           }
#line 5136 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
    break;


#line 5140 "<BUILDDIR>/tables/TableGram.ycc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 1985 "TaQL/TableGram.yy" /* yacc.c:1906  */

